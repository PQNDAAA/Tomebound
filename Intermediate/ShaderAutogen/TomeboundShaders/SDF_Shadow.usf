    return 1;
}

float interleaved_gradient_noise(float2 uv)
{
    uv += View.FrameNumber; // temporal factor
    float3 magic = float3(0.06711056f, 0.00583715f, 52.9829189f);
    return frac(magic.z * frac(dot(uv, magic.xy)));
}

#include "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"


#define SDF_SHADOW_STEPS 64

float sdfShadow(float3 pos, float3 dir, float penumbra, float firstStep, int maxSteps, float maxRayLength, float2 screenPos) {
    float noise = interleaved_gradient_noise(screenPos);
    float3 rayPos = pos + firstStep * dir * (0.5*noise+1.0);
    float shade = 0.;
    float minDist = penumbra;
    float dist = firstStep;
    float rayLength = firstStep;
    for(int i=0; i<SDF_SHADOW_STEPS && i<maxSteps; i++){
        dist = GetDistanceToNearestSurfaceGlobal(rayPos);
        rayLength += dist;
        if(rayLength < maxRayLength) {
            minDist = min(minDist, dist);
            rayPos += dir * dist;
        }
    }
    shade = minDist;
    return shade;

